plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = '1.0'
group = 'com.jayzx535.prehistoricvariants'

base {
    archivesName = "${mod_id}-${mod_version}-forge"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'prehistoricvariants'
			
			arg "-mixin.config=prehistoricvariants.mixins.json"

            mods {
                prehistoricvariants {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', 'prehistoricvariants'
        }

        server {
            property 'forge.enabledGameTestNamespaces', 'prehistoricvariants'
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'prehistoricvariants'
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', 'prehistoricvariants', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "prehistoricvariants.refmap.json"
    config "prehistoricvariants.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
	flatDir {
		dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	
	// Fossils and Archeology
	implementation fg.deobf("curse.maven:fossils-223908:6305300")
	
	// Mixins
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	
	// Architectury
	implementation fg.deobf("curse.maven:architectury-api-419699:5137931")
	
	// Geckolib
	implementation fg.deobf("curse.maven:geckolib-388172:4181370")
	
	// More Hitboxes
	implementation fg.deobf("curse.maven:more-hitboxes-1115989:6296346")
	
	// Terrablender
	implementation fg.deobf("curse.maven:terrablender-563928:3957976")
	
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "PrehistoricVariants",
                "Specification-Vendor"    : "JayZX535",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "JayZX535",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'MixinConfigs'            : "prehistoricvariants.mixins.json"
        ])
    }
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
